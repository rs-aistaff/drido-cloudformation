version: 0.2

env:
  variables:
    S3_USE_AES256: "true"

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/pm-clear-report-chatbot
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - echo '[{"name":"clear-report-chatbot-al","imageUri":"'$REPOSITORY_URI:$IMAGE_TAG'"}]' > imagedefinitions.json
      # Force KMS encryption
      - aws s3 cp imagedefinitions.json s3://$ARTIFACT_BUCKET_NAME/imagedefinitions.json --sse aws:kms --sse-kms-key-id $KMS_KEY_ID || true
      
      # Deploy to Dev Environment
      - echo "Assuming cross-account role for dev deployment..."
      - TEMP_ROLE=$(aws sts assume-role --role-arn arn:aws:iam::029487232994:role/ECSDeployRole-dev --role-session-name CodeBuildSession)
      - export AWS_ACCESS_KEY_ID=$(echo $TEMP_ROLE | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_ROLE | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $TEMP_ROLE | jq -r .Credentials.SessionToken)
      - echo "Switched to target account credentials"
      
      # Deploy ECS infrastructure in target account
      - echo "Deploying ECS infrastructure in target account..."
      - aws cloudformation deploy --template-file infrastructure/ecs-infra.yaml --stack-name pm-clear-report-ecs-dev --parameter-overrides Environment=dev ECRAccountId=649818221453 VpcId=vpc-0600966aa896ad5e3 PublicSubnet1=subnet-02d0927d3fb36cbfc PublicSubnet2=subnet-0afb78be8cc8233b9 PrivateSubnet1=subnet-0abe1be487148d403 PrivateSubnet2=subnet-0e15b3e4bd967909d --capabilities CAPABILITY_NAMED_IAM --region ap-south-1
      
      # Update ECS service if it exists
      - echo "Checking if ECS service exists in target account..."
      - if aws ecs describe-services --cluster pm-clear-report-chatbot-al-dev --services pm-clear-report-chatbot-al-service-dev --region ap-south-1 >/dev/null 2>&1; then
          echo "Updating ECS service in target account...";
          aws ecs update-service --cluster pm-clear-report-chatbot-al-dev --service pm-clear-report-chatbot-al-service-dev --force-new-deployment --region ap-south-1;
        else
          echo "ECS service not found in target account, will be created by CloudFormation";
        fi

artifacts:
  files:
    - imagedefinitions.json
    - infrastructure/support-resources.yaml
    - infrastructure/ecs-infra.yaml
    - infrastructure/cross-account-role.yaml    
  # discard-paths: yes
  # Force SSE-S3 encryption for artifacts
  encryption-disabled: true
